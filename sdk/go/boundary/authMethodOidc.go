// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AuthMethodOidc struct {
	pulumi.CustomResourceState

	// Account claim maps for the to_claim of sub.
	AccountClaimMaps pulumi.StringArrayOutput `pulumi:"accountClaimMaps"`
	// Audiences for which the provider responses will be allowed
	AllowedAudiences pulumi.StringArrayOutput `pulumi:"allowedAudiences"`
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider
	// can reach back to the controller.
	ApiUrlPrefix pulumi.StringPtrOutput `pulumi:"apiUrlPrefix"`
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl pulumi.StringOutput `pulumi:"callbackUrl"`
	// Claims scopes.
	ClaimsScopes pulumi.StringArrayOutput `pulumi:"claimsScopes"`
	// The client ID assigned to this auth method from the provider.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original
	// value can be removed from configuration.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of
	// the value.
	ClientSecretHmac pulumi.StringOutput `pulumi:"clientSecretHmac"`
	// The auth method description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the
	// information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation pulumi.BoolPtrOutput `pulumi:"disableDiscoveredConfigValidation"`
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts pulumi.StringArrayOutput `pulumi:"idpCaCerts"`
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
	// a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope pulumi.BoolPtrOutput `pulumi:"isPrimaryForScope"`
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer pulumi.StringPtrOutput `pulumi:"issuer"`
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication
	// before the user is challenged again.
	MaxAge pulumi.IntPtrOutput `pulumi:"maxAge"`
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope ID.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms pulumi.StringArrayOutput `pulumi:"signingAlgorithms"`
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State pulumi.StringOutput `pulumi:"state"`
	// The type of auth method; hardcoded.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewAuthMethodOidc registers a new resource with the given unique name, arguments, and options.
func NewAuthMethodOidc(ctx *pulumi.Context,
	name string, args *AuthMethodOidcArgs, opts ...pulumi.ResourceOption) (*AuthMethodOidc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	var resource AuthMethodOidc
	err := ctx.RegisterResource("boundary:index/authMethodOidc:AuthMethodOidc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthMethodOidc gets an existing AuthMethodOidc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthMethodOidc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthMethodOidcState, opts ...pulumi.ResourceOption) (*AuthMethodOidc, error) {
	var resource AuthMethodOidc
	err := ctx.ReadResource("boundary:index/authMethodOidc:AuthMethodOidc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthMethodOidc resources.
type authMethodOidcState struct {
	// Account claim maps for the to_claim of sub.
	AccountClaimMaps []string `pulumi:"accountClaimMaps"`
	// Audiences for which the provider responses will be allowed
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider
	// can reach back to the controller.
	ApiUrlPrefix *string `pulumi:"apiUrlPrefix"`
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl *string `pulumi:"callbackUrl"`
	// Claims scopes.
	ClaimsScopes []string `pulumi:"claimsScopes"`
	// The client ID assigned to this auth method from the provider.
	ClientId *string `pulumi:"clientId"`
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original
	// value can be removed from configuration.
	ClientSecret *string `pulumi:"clientSecret"`
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of
	// the value.
	ClientSecretHmac *string `pulumi:"clientSecretHmac"`
	// The auth method description.
	Description *string `pulumi:"description"`
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the
	// information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation *bool `pulumi:"disableDiscoveredConfigValidation"`
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts []string `pulumi:"idpCaCerts"`
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
	// a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope *bool `pulumi:"isPrimaryForScope"`
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer *string `pulumi:"issuer"`
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication
	// before the user is challenged again.
	MaxAge *int `pulumi:"maxAge"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId *string `pulumi:"scopeId"`
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms []string `pulumi:"signingAlgorithms"`
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State *string `pulumi:"state"`
	// The type of auth method; hardcoded.
	Type *string `pulumi:"type"`
}

type AuthMethodOidcState struct {
	// Account claim maps for the to_claim of sub.
	AccountClaimMaps pulumi.StringArrayInput
	// Audiences for which the provider responses will be allowed
	AllowedAudiences pulumi.StringArrayInput
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider
	// can reach back to the controller.
	ApiUrlPrefix pulumi.StringPtrInput
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl pulumi.StringPtrInput
	// Claims scopes.
	ClaimsScopes pulumi.StringArrayInput
	// The client ID assigned to this auth method from the provider.
	ClientId pulumi.StringPtrInput
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original
	// value can be removed from configuration.
	ClientSecret pulumi.StringPtrInput
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of
	// the value.
	ClientSecretHmac pulumi.StringPtrInput
	// The auth method description.
	Description pulumi.StringPtrInput
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the
	// information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation pulumi.BoolPtrInput
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts pulumi.StringArrayInput
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
	// a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope pulumi.BoolPtrInput
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer pulumi.StringPtrInput
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication
	// before the user is challenged again.
	MaxAge pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringPtrInput
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms pulumi.StringArrayInput
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State pulumi.StringPtrInput
	// The type of auth method; hardcoded.
	Type pulumi.StringPtrInput
}

func (AuthMethodOidcState) ElementType() reflect.Type {
	return reflect.TypeOf((*authMethodOidcState)(nil)).Elem()
}

type authMethodOidcArgs struct {
	// Account claim maps for the to_claim of sub.
	AccountClaimMaps []string `pulumi:"accountClaimMaps"`
	// Audiences for which the provider responses will be allowed
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider
	// can reach back to the controller.
	ApiUrlPrefix *string `pulumi:"apiUrlPrefix"`
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl *string `pulumi:"callbackUrl"`
	// Claims scopes.
	ClaimsScopes []string `pulumi:"claimsScopes"`
	// The client ID assigned to this auth method from the provider.
	ClientId *string `pulumi:"clientId"`
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original
	// value can be removed from configuration.
	ClientSecret *string `pulumi:"clientSecret"`
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of
	// the value.
	ClientSecretHmac *string `pulumi:"clientSecretHmac"`
	// The auth method description.
	Description *string `pulumi:"description"`
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the
	// information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation *bool `pulumi:"disableDiscoveredConfigValidation"`
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts []string `pulumi:"idpCaCerts"`
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
	// a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope *bool `pulumi:"isPrimaryForScope"`
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer *string `pulumi:"issuer"`
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication
	// before the user is challenged again.
	MaxAge *int `pulumi:"maxAge"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId string `pulumi:"scopeId"`
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms []string `pulumi:"signingAlgorithms"`
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State *string `pulumi:"state"`
	// The type of auth method; hardcoded.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a AuthMethodOidc resource.
type AuthMethodOidcArgs struct {
	// Account claim maps for the to_claim of sub.
	AccountClaimMaps pulumi.StringArrayInput
	// Audiences for which the provider responses will be allowed
	AllowedAudiences pulumi.StringArrayInput
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider
	// can reach back to the controller.
	ApiUrlPrefix pulumi.StringPtrInput
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl pulumi.StringPtrInput
	// Claims scopes.
	ClaimsScopes pulumi.StringArrayInput
	// The client ID assigned to this auth method from the provider.
	ClientId pulumi.StringPtrInput
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original
	// value can be removed from configuration.
	ClientSecret pulumi.StringPtrInput
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of
	// the value.
	ClientSecretHmac pulumi.StringPtrInput
	// The auth method description.
	Description pulumi.StringPtrInput
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the
	// information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation pulumi.BoolPtrInput
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts pulumi.StringArrayInput
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
	// a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope pulumi.BoolPtrInput
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer pulumi.StringPtrInput
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication
	// before the user is challenged again.
	MaxAge pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringInput
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms pulumi.StringArrayInput
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State pulumi.StringPtrInput
	// The type of auth method; hardcoded.
	Type pulumi.StringPtrInput
}

func (AuthMethodOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authMethodOidcArgs)(nil)).Elem()
}

type AuthMethodOidcInput interface {
	pulumi.Input

	ToAuthMethodOidcOutput() AuthMethodOidcOutput
	ToAuthMethodOidcOutputWithContext(ctx context.Context) AuthMethodOidcOutput
}

func (*AuthMethodOidc) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthMethodOidc)(nil)).Elem()
}

func (i *AuthMethodOidc) ToAuthMethodOidcOutput() AuthMethodOidcOutput {
	return i.ToAuthMethodOidcOutputWithContext(context.Background())
}

func (i *AuthMethodOidc) ToAuthMethodOidcOutputWithContext(ctx context.Context) AuthMethodOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodOidcOutput)
}

// AuthMethodOidcArrayInput is an input type that accepts AuthMethodOidcArray and AuthMethodOidcArrayOutput values.
// You can construct a concrete instance of `AuthMethodOidcArrayInput` via:
//
//          AuthMethodOidcArray{ AuthMethodOidcArgs{...} }
type AuthMethodOidcArrayInput interface {
	pulumi.Input

	ToAuthMethodOidcArrayOutput() AuthMethodOidcArrayOutput
	ToAuthMethodOidcArrayOutputWithContext(context.Context) AuthMethodOidcArrayOutput
}

type AuthMethodOidcArray []AuthMethodOidcInput

func (AuthMethodOidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthMethodOidc)(nil)).Elem()
}

func (i AuthMethodOidcArray) ToAuthMethodOidcArrayOutput() AuthMethodOidcArrayOutput {
	return i.ToAuthMethodOidcArrayOutputWithContext(context.Background())
}

func (i AuthMethodOidcArray) ToAuthMethodOidcArrayOutputWithContext(ctx context.Context) AuthMethodOidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodOidcArrayOutput)
}

// AuthMethodOidcMapInput is an input type that accepts AuthMethodOidcMap and AuthMethodOidcMapOutput values.
// You can construct a concrete instance of `AuthMethodOidcMapInput` via:
//
//          AuthMethodOidcMap{ "key": AuthMethodOidcArgs{...} }
type AuthMethodOidcMapInput interface {
	pulumi.Input

	ToAuthMethodOidcMapOutput() AuthMethodOidcMapOutput
	ToAuthMethodOidcMapOutputWithContext(context.Context) AuthMethodOidcMapOutput
}

type AuthMethodOidcMap map[string]AuthMethodOidcInput

func (AuthMethodOidcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthMethodOidc)(nil)).Elem()
}

func (i AuthMethodOidcMap) ToAuthMethodOidcMapOutput() AuthMethodOidcMapOutput {
	return i.ToAuthMethodOidcMapOutputWithContext(context.Background())
}

func (i AuthMethodOidcMap) ToAuthMethodOidcMapOutputWithContext(ctx context.Context) AuthMethodOidcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodOidcMapOutput)
}

type AuthMethodOidcOutput struct{ *pulumi.OutputState }

func (AuthMethodOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthMethodOidc)(nil)).Elem()
}

func (o AuthMethodOidcOutput) ToAuthMethodOidcOutput() AuthMethodOidcOutput {
	return o
}

func (o AuthMethodOidcOutput) ToAuthMethodOidcOutputWithContext(ctx context.Context) AuthMethodOidcOutput {
	return o
}

// Account claim maps for the to_claim of sub.
func (o AuthMethodOidcOutput) AccountClaimMaps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringArrayOutput { return v.AccountClaimMaps }).(pulumi.StringArrayOutput)
}

// Audiences for which the provider responses will be allowed
func (o AuthMethodOidcOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringArrayOutput { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider
// can reach back to the controller.
func (o AuthMethodOidcOutput) ApiUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringPtrOutput { return v.ApiUrlPrefix }).(pulumi.StringPtrOutput)
}

// The URL that should be provided to the IdP for callbacks.
func (o AuthMethodOidcOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringOutput { return v.CallbackUrl }).(pulumi.StringOutput)
}

// Claims scopes.
func (o AuthMethodOidcOutput) ClaimsScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringArrayOutput { return v.ClaimsScopes }).(pulumi.StringArrayOutput)
}

// The client ID assigned to this auth method from the provider.
func (o AuthMethodOidcOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original
// value can be removed from configuration.
func (o AuthMethodOidcOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of
// the value.
func (o AuthMethodOidcOutput) ClientSecretHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringOutput { return v.ClientSecretHmac }).(pulumi.StringOutput)
}

// The auth method description.
func (o AuthMethodOidcOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the
// information here. The validation is only performed at create or update time.
func (o AuthMethodOidcOutput) DisableDiscoveredConfigValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.BoolPtrOutput { return v.DisableDiscoveredConfigValidation }).(pulumi.BoolPtrOutput)
}

// A list of CA certificates to trust when validating the IdP's token signatures.
func (o AuthMethodOidcOutput) IdpCaCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringArrayOutput { return v.IdpCaCerts }).(pulumi.StringArrayOutput)
}

// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
// a scope means the the user will be automatically created when they login using an OIDC account.
func (o AuthMethodOidcOutput) IsPrimaryForScope() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.BoolPtrOutput { return v.IsPrimaryForScope }).(pulumi.BoolPtrOutput)
}

// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
func (o AuthMethodOidcOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringPtrOutput { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication
// before the user is challenged again.
func (o AuthMethodOidcOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.IntPtrOutput { return v.MaxAge }).(pulumi.IntPtrOutput)
}

// The auth method name. Defaults to the resource name.
func (o AuthMethodOidcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope ID.
func (o AuthMethodOidcOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// Allowed signing algorithms for the provider's issued tokens.
func (o AuthMethodOidcOutput) SigningAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringArrayOutput { return v.SigningAlgorithms }).(pulumi.StringArrayOutput)
}

// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
func (o AuthMethodOidcOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The type of auth method; hardcoded.
func (o AuthMethodOidcOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodOidc) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type AuthMethodOidcArrayOutput struct{ *pulumi.OutputState }

func (AuthMethodOidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthMethodOidc)(nil)).Elem()
}

func (o AuthMethodOidcArrayOutput) ToAuthMethodOidcArrayOutput() AuthMethodOidcArrayOutput {
	return o
}

func (o AuthMethodOidcArrayOutput) ToAuthMethodOidcArrayOutputWithContext(ctx context.Context) AuthMethodOidcArrayOutput {
	return o
}

func (o AuthMethodOidcArrayOutput) Index(i pulumi.IntInput) AuthMethodOidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthMethodOidc {
		return vs[0].([]*AuthMethodOidc)[vs[1].(int)]
	}).(AuthMethodOidcOutput)
}

type AuthMethodOidcMapOutput struct{ *pulumi.OutputState }

func (AuthMethodOidcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthMethodOidc)(nil)).Elem()
}

func (o AuthMethodOidcMapOutput) ToAuthMethodOidcMapOutput() AuthMethodOidcMapOutput {
	return o
}

func (o AuthMethodOidcMapOutput) ToAuthMethodOidcMapOutputWithContext(ctx context.Context) AuthMethodOidcMapOutput {
	return o
}

func (o AuthMethodOidcMapOutput) MapIndex(k pulumi.StringInput) AuthMethodOidcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthMethodOidc {
		return vs[0].(map[string]*AuthMethodOidc)[vs[1].(string)]
	}).(AuthMethodOidcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodOidcInput)(nil)).Elem(), &AuthMethodOidc{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodOidcArrayInput)(nil)).Elem(), AuthMethodOidcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodOidcMapInput)(nil)).Elem(), AuthMethodOidcMap{})
	pulumi.RegisterOutputType(AuthMethodOidcOutput{})
	pulumi.RegisterOutputType(AuthMethodOidcArrayOutput{})
	pulumi.RegisterOutputType(AuthMethodOidcMapOutput{})
}
