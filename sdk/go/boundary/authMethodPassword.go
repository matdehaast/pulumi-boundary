// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AuthMethodPassword struct {
	pulumi.CustomResourceState

	// The auth method description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The minimum login name length.
	MinLoginNameLength pulumi.IntOutput `pulumi:"minLoginNameLength"`
	// The minimum password length.
	MinPasswordLength pulumi.IntOutput `pulumi:"minPasswordLength"`
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope ID.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// The resource type, hardcoded per resource
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewAuthMethodPassword registers a new resource with the given unique name, arguments, and options.
func NewAuthMethodPassword(ctx *pulumi.Context,
	name string, args *AuthMethodPasswordArgs, opts ...pulumi.ResourceOption) (*AuthMethodPassword, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	var resource AuthMethodPassword
	err := ctx.RegisterResource("boundary:index/authMethodPassword:AuthMethodPassword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthMethodPassword gets an existing AuthMethodPassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthMethodPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthMethodPasswordState, opts ...pulumi.ResourceOption) (*AuthMethodPassword, error) {
	var resource AuthMethodPassword
	err := ctx.ReadResource("boundary:index/authMethodPassword:AuthMethodPassword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthMethodPassword resources.
type authMethodPasswordState struct {
	// The auth method description.
	Description *string `pulumi:"description"`
	// The minimum login name length.
	MinLoginNameLength *int `pulumi:"minLoginNameLength"`
	// The minimum password length.
	MinPasswordLength *int `pulumi:"minPasswordLength"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId *string `pulumi:"scopeId"`
	// The resource type, hardcoded per resource
	Type *string `pulumi:"type"`
}

type AuthMethodPasswordState struct {
	// The auth method description.
	Description pulumi.StringPtrInput
	// The minimum login name length.
	MinLoginNameLength pulumi.IntPtrInput
	// The minimum password length.
	MinPasswordLength pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringPtrInput
	// The resource type, hardcoded per resource
	Type pulumi.StringPtrInput
}

func (AuthMethodPasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*authMethodPasswordState)(nil)).Elem()
}

type authMethodPasswordArgs struct {
	// The auth method description.
	Description *string `pulumi:"description"`
	// The minimum login name length.
	MinLoginNameLength *int `pulumi:"minLoginNameLength"`
	// The minimum password length.
	MinPasswordLength *int `pulumi:"minPasswordLength"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId string `pulumi:"scopeId"`
	// The resource type, hardcoded per resource
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a AuthMethodPassword resource.
type AuthMethodPasswordArgs struct {
	// The auth method description.
	Description pulumi.StringPtrInput
	// The minimum login name length.
	MinLoginNameLength pulumi.IntPtrInput
	// The minimum password length.
	MinPasswordLength pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringInput
	// The resource type, hardcoded per resource
	Type pulumi.StringPtrInput
}

func (AuthMethodPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authMethodPasswordArgs)(nil)).Elem()
}

type AuthMethodPasswordInput interface {
	pulumi.Input

	ToAuthMethodPasswordOutput() AuthMethodPasswordOutput
	ToAuthMethodPasswordOutputWithContext(ctx context.Context) AuthMethodPasswordOutput
}

func (*AuthMethodPassword) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthMethodPassword)(nil)).Elem()
}

func (i *AuthMethodPassword) ToAuthMethodPasswordOutput() AuthMethodPasswordOutput {
	return i.ToAuthMethodPasswordOutputWithContext(context.Background())
}

func (i *AuthMethodPassword) ToAuthMethodPasswordOutputWithContext(ctx context.Context) AuthMethodPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodPasswordOutput)
}

// AuthMethodPasswordArrayInput is an input type that accepts AuthMethodPasswordArray and AuthMethodPasswordArrayOutput values.
// You can construct a concrete instance of `AuthMethodPasswordArrayInput` via:
//
//          AuthMethodPasswordArray{ AuthMethodPasswordArgs{...} }
type AuthMethodPasswordArrayInput interface {
	pulumi.Input

	ToAuthMethodPasswordArrayOutput() AuthMethodPasswordArrayOutput
	ToAuthMethodPasswordArrayOutputWithContext(context.Context) AuthMethodPasswordArrayOutput
}

type AuthMethodPasswordArray []AuthMethodPasswordInput

func (AuthMethodPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthMethodPassword)(nil)).Elem()
}

func (i AuthMethodPasswordArray) ToAuthMethodPasswordArrayOutput() AuthMethodPasswordArrayOutput {
	return i.ToAuthMethodPasswordArrayOutputWithContext(context.Background())
}

func (i AuthMethodPasswordArray) ToAuthMethodPasswordArrayOutputWithContext(ctx context.Context) AuthMethodPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodPasswordArrayOutput)
}

// AuthMethodPasswordMapInput is an input type that accepts AuthMethodPasswordMap and AuthMethodPasswordMapOutput values.
// You can construct a concrete instance of `AuthMethodPasswordMapInput` via:
//
//          AuthMethodPasswordMap{ "key": AuthMethodPasswordArgs{...} }
type AuthMethodPasswordMapInput interface {
	pulumi.Input

	ToAuthMethodPasswordMapOutput() AuthMethodPasswordMapOutput
	ToAuthMethodPasswordMapOutputWithContext(context.Context) AuthMethodPasswordMapOutput
}

type AuthMethodPasswordMap map[string]AuthMethodPasswordInput

func (AuthMethodPasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthMethodPassword)(nil)).Elem()
}

func (i AuthMethodPasswordMap) ToAuthMethodPasswordMapOutput() AuthMethodPasswordMapOutput {
	return i.ToAuthMethodPasswordMapOutputWithContext(context.Background())
}

func (i AuthMethodPasswordMap) ToAuthMethodPasswordMapOutputWithContext(ctx context.Context) AuthMethodPasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodPasswordMapOutput)
}

type AuthMethodPasswordOutput struct{ *pulumi.OutputState }

func (AuthMethodPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthMethodPassword)(nil)).Elem()
}

func (o AuthMethodPasswordOutput) ToAuthMethodPasswordOutput() AuthMethodPasswordOutput {
	return o
}

func (o AuthMethodPasswordOutput) ToAuthMethodPasswordOutputWithContext(ctx context.Context) AuthMethodPasswordOutput {
	return o
}

// The auth method description.
func (o AuthMethodPasswordOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodPassword) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The minimum login name length.
func (o AuthMethodPasswordOutput) MinLoginNameLength() pulumi.IntOutput {
	return o.ApplyT(func(v *AuthMethodPassword) pulumi.IntOutput { return v.MinLoginNameLength }).(pulumi.IntOutput)
}

// The minimum password length.
func (o AuthMethodPasswordOutput) MinPasswordLength() pulumi.IntOutput {
	return o.ApplyT(func(v *AuthMethodPassword) pulumi.IntOutput { return v.MinPasswordLength }).(pulumi.IntOutput)
}

// The auth method name. Defaults to the resource name.
func (o AuthMethodPasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodPassword) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope ID.
func (o AuthMethodPasswordOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodPassword) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// The resource type, hardcoded per resource
func (o AuthMethodPasswordOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodPassword) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type AuthMethodPasswordArrayOutput struct{ *pulumi.OutputState }

func (AuthMethodPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthMethodPassword)(nil)).Elem()
}

func (o AuthMethodPasswordArrayOutput) ToAuthMethodPasswordArrayOutput() AuthMethodPasswordArrayOutput {
	return o
}

func (o AuthMethodPasswordArrayOutput) ToAuthMethodPasswordArrayOutputWithContext(ctx context.Context) AuthMethodPasswordArrayOutput {
	return o
}

func (o AuthMethodPasswordArrayOutput) Index(i pulumi.IntInput) AuthMethodPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthMethodPassword {
		return vs[0].([]*AuthMethodPassword)[vs[1].(int)]
	}).(AuthMethodPasswordOutput)
}

type AuthMethodPasswordMapOutput struct{ *pulumi.OutputState }

func (AuthMethodPasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthMethodPassword)(nil)).Elem()
}

func (o AuthMethodPasswordMapOutput) ToAuthMethodPasswordMapOutput() AuthMethodPasswordMapOutput {
	return o
}

func (o AuthMethodPasswordMapOutput) ToAuthMethodPasswordMapOutputWithContext(ctx context.Context) AuthMethodPasswordMapOutput {
	return o
}

func (o AuthMethodPasswordMapOutput) MapIndex(k pulumi.StringInput) AuthMethodPasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthMethodPassword {
		return vs[0].(map[string]*AuthMethodPassword)[vs[1].(string)]
	}).(AuthMethodPasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodPasswordInput)(nil)).Elem(), &AuthMethodPassword{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodPasswordArrayInput)(nil)).Elem(), AuthMethodPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodPasswordMapInput)(nil)).Elem(), AuthMethodPasswordMap{})
	pulumi.RegisterOutputType(AuthMethodPasswordOutput{})
	pulumi.RegisterOutputType(AuthMethodPasswordArrayOutput{})
	pulumi.RegisterOutputType(AuthMethodPasswordMapOutput{})
}
