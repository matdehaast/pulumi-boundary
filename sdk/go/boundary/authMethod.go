// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AuthMethod struct {
	pulumi.CustomResourceState

	// The auth method description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The minimum login name length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinLoginNameLength pulumi.IntOutput `pulumi:"minLoginNameLength"`
	// The minimum password length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinPasswordLength pulumi.IntOutput `pulumi:"minPasswordLength"`
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope ID.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAuthMethod registers a new resource with the given unique name, arguments, and options.
func NewAuthMethod(ctx *pulumi.Context,
	name string, args *AuthMethodArgs, opts ...pulumi.ResourceOption) (*AuthMethod, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource AuthMethod
	err := ctx.RegisterResource("boundary:index/authMethod:AuthMethod", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthMethod gets an existing AuthMethod resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthMethodState, opts ...pulumi.ResourceOption) (*AuthMethod, error) {
	var resource AuthMethod
	err := ctx.ReadResource("boundary:index/authMethod:AuthMethod", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthMethod resources.
type authMethodState struct {
	// The auth method description.
	Description *string `pulumi:"description"`
	// The minimum login name length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinLoginNameLength *int `pulumi:"minLoginNameLength"`
	// The minimum password length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinPasswordLength *int `pulumi:"minPasswordLength"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId *string `pulumi:"scopeId"`
	// The resource type.
	Type *string `pulumi:"type"`
}

type AuthMethodState struct {
	// The auth method description.
	Description pulumi.StringPtrInput
	// The minimum login name length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinLoginNameLength pulumi.IntPtrInput
	// The minimum password length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinPasswordLength pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringPtrInput
	// The resource type.
	Type pulumi.StringPtrInput
}

func (AuthMethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*authMethodState)(nil)).Elem()
}

type authMethodArgs struct {
	// The auth method description.
	Description *string `pulumi:"description"`
	// The minimum login name length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinLoginNameLength *int `pulumi:"minLoginNameLength"`
	// The minimum password length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinPasswordLength *int `pulumi:"minPasswordLength"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId string `pulumi:"scopeId"`
	// The resource type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a AuthMethod resource.
type AuthMethodArgs struct {
	// The auth method description.
	Description pulumi.StringPtrInput
	// The minimum login name length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinLoginNameLength pulumi.IntPtrInput
	// The minimum password length.
	//
	// Deprecated: Will be removed in favor of using attributes parameter
	MinPasswordLength pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringInput
	// The resource type.
	Type pulumi.StringInput
}

func (AuthMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authMethodArgs)(nil)).Elem()
}

type AuthMethodInput interface {
	pulumi.Input

	ToAuthMethodOutput() AuthMethodOutput
	ToAuthMethodOutputWithContext(ctx context.Context) AuthMethodOutput
}

func (*AuthMethod) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthMethod)(nil)).Elem()
}

func (i *AuthMethod) ToAuthMethodOutput() AuthMethodOutput {
	return i.ToAuthMethodOutputWithContext(context.Background())
}

func (i *AuthMethod) ToAuthMethodOutputWithContext(ctx context.Context) AuthMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodOutput)
}

// AuthMethodArrayInput is an input type that accepts AuthMethodArray and AuthMethodArrayOutput values.
// You can construct a concrete instance of `AuthMethodArrayInput` via:
//
//          AuthMethodArray{ AuthMethodArgs{...} }
type AuthMethodArrayInput interface {
	pulumi.Input

	ToAuthMethodArrayOutput() AuthMethodArrayOutput
	ToAuthMethodArrayOutputWithContext(context.Context) AuthMethodArrayOutput
}

type AuthMethodArray []AuthMethodInput

func (AuthMethodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthMethod)(nil)).Elem()
}

func (i AuthMethodArray) ToAuthMethodArrayOutput() AuthMethodArrayOutput {
	return i.ToAuthMethodArrayOutputWithContext(context.Background())
}

func (i AuthMethodArray) ToAuthMethodArrayOutputWithContext(ctx context.Context) AuthMethodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodArrayOutput)
}

// AuthMethodMapInput is an input type that accepts AuthMethodMap and AuthMethodMapOutput values.
// You can construct a concrete instance of `AuthMethodMapInput` via:
//
//          AuthMethodMap{ "key": AuthMethodArgs{...} }
type AuthMethodMapInput interface {
	pulumi.Input

	ToAuthMethodMapOutput() AuthMethodMapOutput
	ToAuthMethodMapOutputWithContext(context.Context) AuthMethodMapOutput
}

type AuthMethodMap map[string]AuthMethodInput

func (AuthMethodMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthMethod)(nil)).Elem()
}

func (i AuthMethodMap) ToAuthMethodMapOutput() AuthMethodMapOutput {
	return i.ToAuthMethodMapOutputWithContext(context.Background())
}

func (i AuthMethodMap) ToAuthMethodMapOutputWithContext(ctx context.Context) AuthMethodMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodMapOutput)
}

type AuthMethodOutput struct{ *pulumi.OutputState }

func (AuthMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthMethod)(nil)).Elem()
}

func (o AuthMethodOutput) ToAuthMethodOutput() AuthMethodOutput {
	return o
}

func (o AuthMethodOutput) ToAuthMethodOutputWithContext(ctx context.Context) AuthMethodOutput {
	return o
}

// The auth method description.
func (o AuthMethodOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethod) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The minimum login name length.
//
// Deprecated: Will be removed in favor of using attributes parameter
func (o AuthMethodOutput) MinLoginNameLength() pulumi.IntOutput {
	return o.ApplyT(func(v *AuthMethod) pulumi.IntOutput { return v.MinLoginNameLength }).(pulumi.IntOutput)
}

// The minimum password length.
//
// Deprecated: Will be removed in favor of using attributes parameter
func (o AuthMethodOutput) MinPasswordLength() pulumi.IntOutput {
	return o.ApplyT(func(v *AuthMethod) pulumi.IntOutput { return v.MinPasswordLength }).(pulumi.IntOutput)
}

// The auth method name. Defaults to the resource name.
func (o AuthMethodOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethod) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope ID.
func (o AuthMethodOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethod) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// The resource type.
func (o AuthMethodOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethod) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AuthMethodArrayOutput struct{ *pulumi.OutputState }

func (AuthMethodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthMethod)(nil)).Elem()
}

func (o AuthMethodArrayOutput) ToAuthMethodArrayOutput() AuthMethodArrayOutput {
	return o
}

func (o AuthMethodArrayOutput) ToAuthMethodArrayOutputWithContext(ctx context.Context) AuthMethodArrayOutput {
	return o
}

func (o AuthMethodArrayOutput) Index(i pulumi.IntInput) AuthMethodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthMethod {
		return vs[0].([]*AuthMethod)[vs[1].(int)]
	}).(AuthMethodOutput)
}

type AuthMethodMapOutput struct{ *pulumi.OutputState }

func (AuthMethodMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthMethod)(nil)).Elem()
}

func (o AuthMethodMapOutput) ToAuthMethodMapOutput() AuthMethodMapOutput {
	return o
}

func (o AuthMethodMapOutput) ToAuthMethodMapOutputWithContext(ctx context.Context) AuthMethodMapOutput {
	return o
}

func (o AuthMethodMapOutput) MapIndex(k pulumi.StringInput) AuthMethodOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthMethod {
		return vs[0].(map[string]*AuthMethod)[vs[1].(string)]
	}).(AuthMethodOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodInput)(nil)).Elem(), &AuthMethod{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodArrayInput)(nil)).Elem(), AuthMethodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodMapInput)(nil)).Elem(), AuthMethodMap{})
	pulumi.RegisterOutputType(AuthMethodOutput{})
	pulumi.RegisterOutputType(AuthMethodArrayOutput{})
	pulumi.RegisterOutputType(AuthMethodMapOutput{})
}
